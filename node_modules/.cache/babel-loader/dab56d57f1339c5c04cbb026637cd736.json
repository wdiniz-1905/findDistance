{"ast":null,"code":"import _classCallCheck from \"/home/walterjunior/sequor/threeD/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/walterjunior/sequor/threeD/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/walterjunior/sequor/threeD/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/walterjunior/sequor/threeD/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/walterjunior/sequor/threeD/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/walterjunior/sequor/threeD/src/App.js\";\nimport React, { Component } from \"react\";\nimport * as THREE from \"three\";\n\nvar App = /*#__PURE__*/function (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    _classCallCheck(this, App);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(App).apply(this, arguments));\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var scene = new THREE.Scene();\n      var camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 1, 1000);\n      var renderer = new THREE.WebGLRenderer();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      this.mount.appendChild(renderer.domElement);\n      var geometry = new THREE.BoxGeometry(2, 2, 2, 1, 1, 1);\n      var material = new THREE.MeshBasicMaterial({\n        color: 0x00ff00\n      });\n      var cube = new THREE.Mesh(geometry, material);\n      var bGeometry = new THREE.BufferGeometry();\n      bGeometry.fromGeometry(geometry);\n      scene.add(cube);\n      var geometry2 = new THREE.CylinderGeometry(2, 2, 2, 5, 5);\n      var material2 = new THREE.MeshBasicMaterial({\n        color: 0xffff00\n      });\n      var cylinder = new THREE.Mesh(geometry2, material2);\n      var bGeometry2 = new THREE.BufferGeometry();\n      bGeometry2.fromGeometry(geometry2);\n      scene.add(cylinder); //var a = new THREE.Vector3(0, 0, 0);\n\n      var light = new light.position.set(5, 25, 50);\n      scene.add(light);\n      cube.position.x = 0;\n      cube.position.y = 0;\n      cube.position.z = 0;\n      cylinder.position.x = 0;\n      cylinder.position.y = 0;\n      cylinder.position.z = 0; //camera.lookAt(a)\n\n      findDistance(bGeometry, bGeometry2);\n\n      var animate = function animate() {\n        requestAnimationFrame(animate);\n        renderer.render(scene, camera);\n      };\n\n      animate();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      return React.createElement(\"div\", {\n        ref: function ref(_ref) {\n          return _this.mount = _ref;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;\n\nvar findDistance = function findDistance(bGeometry, bGeometry2) {\n  var car = [];\n  var car2 = [];\n  var minDistance = Math.pow(10, 6);\n  var diffx;\n  var diffy;\n  var diffz;\n  var distance;\n  var positions = bGeometry.getAttribute('position');\n  var positions2 = bGeometry2.getAttribute('position');\n\n  for (var k = 0; k < positions.count; k++) {\n    var myPosition = new THREE.Vector3(positions.array[k * 3], positions.array[k * 3 + 1], positions.array[k * 3 + 2]);\n    car[k] = myPosition;\n    var myPosition2 = new THREE.Vector3(positions2.array[k * 3], positions2.array[k * 3 + 1], positions2.array[k * 3 + 2]);\n    car2[k] = myPosition2;\n    diffx = car[k].x - car2[k].x;\n    diffy = car[k].y - car2[k].y;\n    diffz = car[k].z - car2[k].z;\n    distance = Math.pow(Math.pow(diffx, 2) + Math.pow(diffy, 2) + Math.pow(diffz, 2), 0.5);\n\n    if (distance <= minDistance) {\n      minDistance = distance;\n    }\n  }\n\n  console.log(minDistance);\n};","map":{"version":3,"sources":["/home/walterjunior/sequor/threeD/src/App.js"],"names":["React","Component","THREE","App","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","setSize","mount","appendChild","domElement","geometry","BoxGeometry","material","MeshBasicMaterial","color","cube","Mesh","bGeometry","BufferGeometry","fromGeometry","add","geometry2","CylinderGeometry","material2","cylinder","bGeometry2","light","position","set","x","y","z","findDistance","animate","requestAnimationFrame","render","ref","car","car2","minDistance","Math","pow","diffx","diffy","diffz","distance","positions","getAttribute","positions2","k","count","myPosition","Vector3","array","myPosition2","console","log"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport * as THREE from \"three\";   \n\n\n\nclass App extends Component{\n  componentDidMount() {\n    var scene = new THREE.Scene();\n    var camera = new THREE.PerspectiveCamera(75,window.innerWidth / window.innerHeight,1,1000);\n\n    var renderer = new THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    this.mount.appendChild(renderer.domElement);\n\n    var geometry = new THREE.BoxGeometry(2, 2, 2,1,1,1);\n    var material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });\n    var cube = new THREE.Mesh(geometry, material);\n    var bGeometry = new THREE.BufferGeometry();\n    bGeometry.fromGeometry(geometry);\n    scene.add(cube);\n\n    var geometry2 = new THREE.CylinderGeometry( 2, 2, 2,5,5);\n    var material2 = new THREE.MeshBasicMaterial( {color: 0xffff00} );\n    var cylinder = new THREE.Mesh( geometry2, material2 );\n    var bGeometry2 = new THREE.BufferGeometry();\n    bGeometry2.fromGeometry(geometry2);\n    scene.add(cylinder);\n    \n    //var a = new THREE.Vector3(0, 0, 0);\n    const light = new \n    \n    light.position.set(5, 25, 50);\n\n    scene.add(light);\n\n    cube.position.x = 0;\n    cube.position.y = 0;\n    cube.position.z = 0;\n\n    cylinder.position.x = 0;\n    cylinder.position.y = 0;\n    cylinder.position.z = 0;\n\n    //camera.lookAt(a)\n    \n    findDistance(bGeometry,bGeometry2);\n    \n    var animate = function() {\n        requestAnimationFrame(animate);\n        renderer.render(scene, camera);\n    };\n\n    animate();\n    \n  }\n  render() {\n    return <div ref={ref => (this.mount = ref)} />;\n  }\n}\nexport default App;\n\n\n\nconst findDistance = function(bGeometry,bGeometry2){\n    var car=[];\n    var car2=[];\n    var minDistance=Math.pow(10,6);\n    var diffx;\n    var diffy;\n    var diffz;\n    var distance;\n    var positions = bGeometry.getAttribute('position');\n    var positions2 = bGeometry2.getAttribute('position');\n    for(let k=0;k<positions.count;k++){\n    var myPosition =  new THREE.Vector3(positions.array[k*3], positions.array[k*3 + 1], positions.array[k*3 + 2],);\n    car[k]=myPosition;\n    var myPosition2 =  new THREE.Vector3(positions2.array[k*3], positions2.array[k*3 + 1], positions2.array[k*3 + 2],);\n    car2[k]=myPosition2;\n    diffx=car[k].x-car2[k].x;\n    diffy=car[k].y-car2[k].y;\n    diffz=car[k].z-car2[k].z;\n    distance=Math.pow(Math.pow(diffx,2)+Math.pow(diffy,2)+Math.pow(diffz,2),0.5);\n    if(distance<=minDistance){\n        minDistance=distance;\n    }\n    }\n    console.log(minDistance);\n}"]},"metadata":{},"sourceType":"module"}